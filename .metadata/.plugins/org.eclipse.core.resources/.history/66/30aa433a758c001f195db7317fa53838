package com.image.Upload.ImageUpload.CONTROLLER;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.image.Upload.ImageUpload.ENTITY.Image;
import com.image.Upload.ImageUpload.RESPONSE_STRUCTURE.ResponseStructure;
import com.image.Upload.ImageUpload.SERVICE.ImageService;

@RestController
@CrossOrigin
@RequestMapping("image")
public class ImageController {
	@Autowired
	private ImageService imageService;

	@PostMapping("register/")
	public ResponseEntity<ResponseStructure<Image>> register(@RequestBody MultipartFile file) throws IOException {
		Image image = new Image(file.getName(), file.getContentType(), file.getBytes());
		return new ResponseEntity<ResponseStructure<Image>>(new ResponseStructure<Image>(imageService.saveImage(image),
				HttpStatus.CREATED.value(), "Image Has Been Added Sucessfully"), HttpStatusCode.valueOf(200));
	}

	@GetMapping("collection")
	public ResponseEntity<ResponseStructure<List<Image>>> collection() {
		return new ResponseEntity<ResponseStructure<List<Image>>>(
				new ResponseStructure<List<Image>>(imageService.getAll(), HttpStatus.OK.value(),
						"Data Has Been Fetched Sucessfully"),
				HttpStatusCode.valueOf(201));
	}

	@GetMapping("collectionByID/{id}")
	public ResponseEntity<ResponseStructure<Image>> collectionById(@PathVariable int id) {
		Image image = imageService.getId(id);
		if (image != null) {
			return new ResponseEntity<ResponseStructure<Image>>(
					new ResponseStructure<Image>(image, HttpStatus.OK.value(), "All Image Has Been Fetched"),
					HttpStatusCode.valueOf(201));
		} else {
			return new ResponseEntity<ResponseStructure<Image>>(
					new ResponseStructure<Image>(null, HttpStatus.BAD_REQUEST.value(), "Image Does Not Exist"),
					HttpStatusCode.valueOf(404));
		}
	}

	@GetMapping("collectionByName/{name}")
	public ResponseEntity<ResponseStructure<Image>> collectionByName(@PathVariable String name) {
		Image image = imageService.getName(name);
		if (image != null) {
			return new ResponseEntity<ResponseStructure<Image>>(
					new ResponseStructure<Image>(image, HttpStatus.OK.value(), "Image Has Been Fetched"),
					HttpStatusCode.valueOf(201));
		} else {
			return new ResponseEntity<ResponseStructure<Image>>(
					new ResponseStructure<Image>(null, HttpStatus.BAD_REQUEST.value(), "Image Does Not Exist"),
					HttpStatusCode.valueOf(404));
		}
	}

	@DeleteMapping("removeAccount/{id}")
	public ResponseEntity<ResponseStructure<Image>> removeImage(@PathVariable int id) {
		Image image = imageService.deleteAccount(id);
		if (image != null) {
			return new ResponseEntity<ResponseStructure<Image>>(
					new ResponseStructure<Image>(image, HttpStatus.OK.value(), "Image Has Been Deleted Sucessfully"),
					HttpStatusCode.valueOf(201));
		} else {
			return new ResponseEntity<ResponseStructure<Image>>(
					new ResponseStructure<Image>(null, HttpStatus.BAD_REQUEST.value(), "Image Does Not Exist"),
					HttpStatusCode.valueOf(404));
		}
	}

	@PutMapping("updateImage/{id}")
	public ResponseEntity<ResponseStructure<Image>> updateImage(@PathVariable int id, @RequestBody Image image) {
		Image product = imageService.updateImage(id, image);
		if (image != null) {
			return new ResponseEntity<ResponseStructure<Image>>(
					new ResponseStructure<Image>(product, HttpStatus.OK.value(), "Image Has Been Updated Sucessfully"),
					HttpStatusCode.valueOf(201));
		} else {
			return new ResponseEntity<ResponseStructure<Image>>(
					new ResponseStructure<Image>(null, HttpStatus.BAD_REQUEST.value(), "Image Does Not Exist"),
					HttpStatusCode.valueOf(404));
		}
	}
}
